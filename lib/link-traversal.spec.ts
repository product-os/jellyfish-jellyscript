/*
 * Copyright (C) Balena.io - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

import { reverseLink } from './link-traversal';

describe('reverseLink', () => {
	test('should reverse', async () => {
		const reversed = reverseLink('transformer', 'generated');
		expect(reversed['was generated by']).toBeDefined();
		expect(reversed['was generated by'][0]?.data?.from).toEqual('task');
	});

	test('should reverse inverse', async () => {
		const reversed = reverseLink('transformer', 'is owned by');
		expect(reversed['owns']).toBeDefined();
		expect(reversed['owns'][0]?.data?.from).toEqual('loop');
	});

	test('should allow "*", aka "any" types', async () => {
		const reversed = reverseLink('some-new-type', 'was built into');
		expect(reversed['was built from']).toBeDefined();
		expect(reversed['was built from'][0]?.data?.from).toEqual('*');
	});

	test('should return empty object for undefined link', async () => {
		const reversed = reverseLink('thread', 'i made this up');
		expect(reversed).toEqual({});
	});
});
